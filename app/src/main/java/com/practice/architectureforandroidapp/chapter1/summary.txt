1. 어플리케이션 설계란?
구성요소들의 유기적 관계를 표현하고, 요구 사항을 해결하려는 계획 과정 등의 원칙을 나타낸다.
텍스트, 그림, 다이어그램 등 다양한 형식을 취한다.

어플리케이션은 한 번 구현되고 나면 변경 발생 시 비용이 많이 든다.
그러므로 유지 보수에 용이한 설계를 해야 한다.

2. 어플리케이션의 설계 원칙
SOLID

SRP (단일 책임의 원칙)
클래스는 하나의 책임만 가지고 있어야 한다는 원칙.
가지고 있는 책임을 캡슐화해야 하며, 클래스에 국한되지 않고 메소드나 모듈에도 해당되는 얘기이다.
여러 클래스들이 각자 여러 개의 책임을 가지고 있게 되면, 특정 기능의 오류 발생 시 여러 클래스를 모두 수정해야 하여
수정이 힘들고 확장이나 기능 추가도 어렵게 된다.

OCP (개방 폐쇄의 원칙)
클래스는 확장에 열려있고 수정에는 닫혀 있어야 한다는 원칙.
특정 클래스를 수정함으로 인해 연관된 다른 요소들도 수정이 되지 않아야 유지보수가 용이하다.
적절한 책임 분배로 수정 범위를 최소화 할 수 있어야 하며,
또한 기능 확장이 용이하도록 잘 설계하여 기능 추가나 수정이 쉬워야 한다.

LSP (리스코프 치환 원칙)
상위 클래스를 하위 클래스로 치환하더라도 그 기능이 제대로 동작해야 한다는 원칙.
상속하더라도 상위 클래스의 본래 기능을 유지하고 만족할 수 있어야 한다.

ISP (인터페이스 분리 원칙)
어떠한 클래스가 자신이 사용하지 않는 메소드에 의존하지 않아야 한다는 원칙.
상속/구현으로 인해 사용하지 않는 메소드가 생긴다면, 해당 기능은 인터페이스로 분리해야 한다.
클래스들의 의존성이 약해지므로 유지보수 및 수정이 용이해진다.

DIP (의존성 역전 원칙)
상위 클래스가 하위 클래스에 의존하는 전통적인 관계를 역전하여 상위 클래스가 하위 클래스의 구현으로부터 분리될 수 있어야 한다는 원칙.
상위/하위 모듈은 모두 추상화에 의존해야 하고, 추상화는 세부 사항에 의존하지 않고 세부 사항이 추상화에 의존하도록 설계해햐 한다.

3. 클린 아키텍쳐
소프트웨어의 관심사를 계층별로 분리하는 소프트웨어 디자인 철학
코드 종속성이 외부로부터 내부로 의존한다
-> 내부 계층의 코드는 외부 계층의 기능을 알 수 없다.
-> 외부 계층에 존재하는 변수, 함수 및 클래스(모든 엔터티)는 안쪽 계층에서 다시 등장할 수 없다.
안쪽 계층으로 진입할수록 추상화와 캡슐화 수준이 높아진다.

Entities - Use Cases - Presenters - UI
Enterprise Business Rules - Application Business Rules - Interface Adapters - Frameworks & Drivers

장점
계층을 분리하고 계층 간의 의존성을 단방향으로 만들기 때문에
1. 코드의 재사용성이 용이해진다
2. 유닛 테스트가 쉬워진다.

Entities
전사적 비즈니스 규칙을 캡슐화한다.
데이터의 구조나 메서드를 포함하는 객체
다른 어플리케이션 사이에서 사용될 수 있다.

e.g. POJO와 같은 데이터 클래스

Use Cases
애플리케이션과 관련된 비즈니스 규칙을 포함하고 시스템의 모든 유스케이스 구현체들을 캡슐화한다.
유스케이스들은 엔터티로부터의 데이터 흐름을 관리하고,
유스케이스의 목적을 달성하도록 엔터티에 넓고 전사적인 비즈니스 규칙의 사용을 가르친다.

e.g. 안드로이드의 Model, Repository, Executor
Model : 데이터베이스의 질의나 네트워크 요청 등의 비즈니스 로직을 수행한다.
Repository : 내부 DB에 접근하거나 저장 또는 원격 서버의 데이터를 요청하는 역할을 한다.
 일반적으로 인터페이스이며 이를 구현하여 외부 계층의 연결을 느슨하게 한다.
Executor : Repository나 Model과 관련된 작업이 백그라운드에서 작업을 수행할 수 있도록 작업 스레드를 관리하고 제공한다.

Interface Adapters
유스케이스나 엔터티로부터 얻은 데이터를 가공하는 계층이다.
비즈니스 로직을 수행하여 원하는 결과 값을 얻어 UI에 표현하려고 적당한 형식으로 데이터를 변경한다.

e.g. Presenter, View, ViewModel, Controller

UI로부터 얻은 데이터를 내부 DB나 원격 서버에 전송할 때도 이 계층에서 데이터를 가공하여 전달한다.


Frameworks와 Drivers
가장 바깥쪽 계층
e.g. 안드로이드의 UI (액티비티, 프래그먼트, 인텐트 전달), 데이터베이스, 컨텐츠 프로바이더, Retrofit과 같은 네트워크 관련 프레임워크 코드


4. 안드로이드의 특징
하나의 진입점, 하나의 프로세스에서 실행되는 일반적인 어플리케이션과는 달리,
여러 프로세스로 실행될 수도 있고, 진입점도 다양하다
언제든지 메모리 부족과 같은 시스템 조건으로 인해 의도치 않게 종료될 수 있다.


5. 안드로이드 어플리케이션 설계 원칙
액티비티나 프래그먼트 같은 UI 컴포넌트에 많은 코드를 작성하기 쉽다.
Context, View, 데이터, 시스템 이벤트 등을 쉽게 참조 가능하기 때문이다.
UI 컴포넌트에 데이터를 저장하게 되면 예외 사항 대응이 힘들고, 거대해진 코드량 때문에 가독성도 떨어진다.

관심사의 분리가 필요
관심사 : 데이터에 영향을 미치는 정보의 집합
클래스간의 의존성을 느슨하게 하면서 모듈화하는 것으로 달성할 수 있다.


6. 권장하는 어플리케이션 설계
구글에서 권장하는 설계 방법
- 액티비티, 프래그먼트는 ViewModel만을 참조한다.
- ViewModel은 Repository라는 저장소를 참조하고, UI 컴포넌트가 화면을 구성하는데 필요한 데이터를 불러온다.
- 데이터는 LiveData라는 형태로 관리한다.
- 저장소는 두 가지 타입의 모델을 참조한다. 1) 네트워크 연결이 필요없는 내부 모델, 2) 네트워크가 필요한 원격 모델
- 데이터는 ViewModel에 관리하며 데이터의 변경이 감지되는 대로 UI 컴포넌트의 바인딩된 뷰에 나타낸다.
- ViewModel은 내부 데이터베이스 만을 항상 참조하고, 클라이언트의 데이터베이스와 서버의 데이터베이스가 요청으로 비동기적으로 동기화한다.


7. 안드로이드 어플리케이션 설계 패턴

MVC - Model-View-Controller

Model
: 어플리케이션의 비즈니스 로직과 사용되는 데이터를 다루는 영역
비즈니스 데이터는 DBMS에 의해 관리되고 몇몇 함수를 통해 데이터를 제공하거나 입력, 수정 등을 하는 역할을 한다.
데이터베이스의 entity를 담당하는 POJO 클래스를 포함한 SQLite, Room, Realm 등이 될 수 있다.

View
: 사용자에게 표현되는 영역
모델로부터 얻은 데이터를 뷰에서 표현.
액티비티, 프래그먼트..

Controller
: 뷰로부터 입력/이벤트를 받으면 모델/뷰를 변경할 수 있다.
액티비티, 프래그먼트는 뷰와 컨트롤러 역할을 겸하기도 한다.

장점
직관적이라 이해하기 쉽다
규모가 작은 앱에 적합하며 개발 기간이 짧아지고 코드 파악도 쉽다

단점
코드가 커질수록 뷰/컨트롤러 코드가 커져서 유지보수가 어려워 진다.
컨트롤러가 뷰와 모델 모두에 의존적인 형태가 되므로 유닛테스트가 어렵다.


MVP - Model-View-Presenter
MVC와 비슷하나 액티비티와 프래그먼트의 UI와 비즈니스 로직을 분리하는 데 집중함
이를 통해 유닛 테스트를 할 수 있다.

장점
Presenter는 View와 1:1 관계를 맺으며, View와 모델을 연결해주는 역할
View와 모델의 의존성이 없어지므로 유닛 테스트가 수월함.

단점
View와 Presenter 간의 의존성이 높고, 1:1 관계이므로 Presenter를 재사용할 수 없어 그만큼 클래스가 많아짐
앱이 커질수록 Presenter가 거대해지는 단점이 있다.

구현하기

1. Contract class 만들기
구성 요소의 역할과 관계를 정의한다.
구성 요소는 보통 View와 Presenter 정도만 정의.
Model은 보통 Repository 패턴으로 따로 정의하여 Presenter를 구현할 때 포함한다.

public class MainContract {
    public interface View {
        void showPersonList(List<Person> personList);
        void notifyDataChanged();
    }

    public interface Presenter {
        void load();
        void addPerson(Person person);
        void removePerson(Person person);
    }
}

2. Presenter class 만들기

View의 역할
1) View 인터페이스에 정의된 메서드를 재정의하여 데이터를 화면에 나타낸다.
2) Presenter에 생명 주기 또는 클릭 이벤트에 대한 내용을 통지한다.
View의 구현은 보통 액티비티 또는 프래그먼트에서 이루어진다.

public class MainPresenter implements MainContract.Presenter {

    private Database database;
    private MainContract.View view;

    public MainPresenter(Database database, MainContract.View view) {
        this.database = database;
        this.view = view;
        this.database.setOnDatabaseListener(new Database.DatabaseListener() {
            @Override
            public void onChanged() {
                MainPresenter.this.view.notifyDataChanged();
            }
        }
    }

    @Override
    void load() {
        view.showPersonList(database.getPersonList(());
    }

    @Override
    void addPerson(Person person) {
        database.add(person);
    }

    @Override
    void removePerson(Person person) {
        database.remove(person);
    }
}


MVVM 디자인 패턴

View와 Presenter가 강하게 연결되는 점을 해결하기 위해 등장
데이터 바인딩과 LiveData/RxJava와 같은 Observable 타입을 이용하여 View와 Presenter 간의 강한 연결을 끊는다.
ViewModel이 Presenter 대신 사용되며, View에 표현할 데이터인 Observable 타입을 관리한다.
View들이 ViewModel에 데이터를 구독 요청하여 화면에 나타내는 것이 핵심.
View와 ViewModel은 1:N 관계가 있다.
데이터 바인딩 라이브러리는 ViewModel이 View에 의존성을 갖지 않고 느슨하게 연결되도록 한다.

ViewModel 구현하기
MainViewModel은 Person 목록을 가지고 있고, View와 관련된 코드들을 참조하지 않는 것이 MVVM의 핵심이다.

public class MainViewModel extends BaseObservable {
    private Database database;

    private List<Person> items = new ArrayList<>();

    public MainViewModel(Database database) {
        this.database = database;
        this.database.setOnDatabaseListener(new Database.DatabaseListener() {
            @Override
            public void onChanged() {
                load();
            }
        }
    }

    public void load() {
        items.clear();
        items.addAll(database.getPersonList());
        notifyChange();
    }

    void addPerson(Person person) {
        database.add(person);
    }

    void removePerson(Person person) {
        database.remove(person);
    }

    public List<Person> getItems() {
        return items;
    }
}