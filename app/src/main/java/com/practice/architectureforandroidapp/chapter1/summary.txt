1. 어플리케이션 설계란?
구성요소들의 유기적 관계를 표현하고, 요구 사항을 해결하려는 계획 과정 등의 원칙을 나타낸다.
텍스트, 그림, 다이어그램 등 다양한 형식을 취한다.

어플리케이션은 한 번 구현되고 나면 변경 발생 시 비용이 많이 든다.
그러므로 유지 보수에 용이한 설계를 해야 한다.

2. 어플리케이션의 설계 원칙
SOLID

SRP (단일 책임의 원칙)
클래스는 하나의 책임만 가지고 있어야 한다는 원칙.
가지고 있는 책임을 캡슐화해야 하며, 클래스에 국한되지 않고 메소드나 모듈에도 해당되는 얘기이다.
여러 클래스들이 각자 여러 개의 책임을 가지고 있게 되면, 특정 기능의 오류 발생 시 여러 클래스를 모두 수정해야 하여
수정이 힘들고 확장이나 기능 추가도 어렵게 된다.

OCP (개방 폐쇄의 원칙)
클래스는 확장에 열려있고 수정에는 닫혀 있어야 한다는 원칙.
특정 클래스를 수정함으로 인해 연관된 다른 요소들도 수정이 되지 않아야 유지보수가 용이하다.
적절한 책임 분배로 수정 범위를 최소화 할 수 있어야 하며,
또한 기능 확장이 용이하도록 잘 설계하여 기능 추가나 수정이 쉬워야 한다.

LSP (리스코프 치환 원칙)
상위 클래스를 하위 클래스로 치환하더라도 그 기능이 제대로 동작해야 한다는 원칙.
상속하더라도 상위 클래스의 본래 기능을 유지하고 만족할 수 있어야 한다.

ISP (인터페이스 분리 원칙)
어떠한 클래스가 자신이 사용하지 않는 메소드에 의존하지 않아야 한다는 원칙.
상속/구현으로 인해 사용하지 않는 메소드가 생긴다면, 해당 기능은 인터페이스로 분리해야 한다.
클래스들의 의존성이 약해지므로 유지보수 및 수정이 용이해진다.

DIP (의존성 역전 원칙)
상위 클래스가 하위 클래스에 의존하는 전통적인 관계를 역전하여 상위 클래스가 하위 클래스의 구현으로부터 분리될 수 있어야 한다는 원칙.
상위/하위 모듈은 모두 추상화에 의존해야 하고, 추상화는 세부 사항에 의존하지 않고 세부 사항이 추상화에 의존하도록 설계해햐 한다.
